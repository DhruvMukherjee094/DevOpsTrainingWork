For putting in user descripter tab while creating EC2 instance. This one loads a shell script which is kept in an s3 bucket somewhere in us-west-2 region.

#!/bin/sh
curl -L https://us-west-2-aws-training.s3.amazonaws.com/awsu-spl/spl03-working-elb/static/bootstrap-elb.sh|sh



To create a tar file-----

#!/bin/bash

filename=homedirbackup_$(date +%Y%m%d).tar.gz
tar -czf $filename /$HOME



Example--------------

vi functiondemo.sh
#!/bin/bash

x="global value"

function bashfunction {
    local x="local value"
    echo $x
    }

echo $x

# call the bashfunction
bashfunction

echo $x



Example---------------

vi argumentpassing.sh
 
 #!/bin/bash
    
printfunction () {
   echo Hello $1
   return 0
   }
   
printfunction Hello
   
printfunction "Big data!"


bash argumentpassing.sh


Example----------------------

#!/bin/bash
osname=$1
echo $osname
echo `uname -a`   (backtick, used to run any command inside bash)
bash file Ubuntu


https://dzone.com/articles/top-20-git-commands-with-examples


readinput.sh:
------------------readuser-input.sh------------------------
#!/bin/bash
 
echo -e "Hi, please your name: \c "
read  name
echo "Hello $name !"


------------------------Redirection Error -------------------------------
Name       FD   Description
   stdin    0   standard input stream (e.g. keyboard)
   stdout   1   standard output stream (e.g. monitor)
   stderr   2   standard error output stream (usually also on monitor
   
   vi redirection.sh
     # stdout from bash script to stderr
     echo "Hello! Big Data @ Bash" 1>&2 
     # stderr from bash script to /dev/null
     # Note that there's no command called 'dates'

     dates 2>&1  // This will display errors
     dates 2>/dev/null // This will not display errors

     # stderr and stdout to file
     dates &> outfile.txt


 Bash conditional statements

Operator    Description
-eq         Equal to
-ne         Not equal to
-gt         Greater than
-ge         Greater than OR equal to
-lt         less than
-le         less than OR equal to

     vi bash-ifelse.sh
       #!/bin/bash

       total=${1}
       if [ $total -eq 1 ]; then
         echo "the number is equal to 1"
       else
         echo "the number is NOT equal to 1"
       fi
    
    bash bash-ifelse.sh


Bash file test operators

File Test   Operator Description
-e           File exists (this could be regular file, directory, block device, character device, etc.,)
-f           It’s a regular file (for example: /etc/shadow)
-d           It’s a directory (for example: /var)
-b           It’s a block device (for example:/dev/sdb)
-c           It’s a character device (for example:/dev/tty2)
-s           File is not empty
-r           File read permission
-w           File write permission
-x           File execute permission
-u           suid set on the file
-g           sgid set on the file
-k           Sticky bit set on the file
-p           It’s a pipe
-S           It’s a socket
-h           It’s a symbolic link
-t           Checks whether the given FD is opened in a terminal.
-O           You own the file
-G           File group id and my group id are the same.
-N           Did the file got modified since last read?
file-a -nt file-b   file-a is newer than file-b
file-a -ot file-b   File1 is older than file2
file-a -ef file-b   Both file1 and file2 are hard linked to the same file




#!/bin/bash

directory=$1

# bash check if directory exists
if [ -d $directory ]; then
    echo "Directory exists!"
else 
    echo "Directory does not exists!"
fi



#!bin/bash

total=${1}

if [ $total -le 40 ]; then

echo " The number is greater"
else
echo " The number is les than $total"

fi


--------------Case Statement-------------------
vi bash-case.sh

#!/bin/bash
echo "What is your scripting language? (0 = EXIT)"
echo "1) bash"
echo "2) perl"
echo "3) phyton"
echo "4) None of the above !"
read case;

case $case in
    1) echo "You've selected bash!";;
    2) echo "You've selected perl!";;
    3) echo "You've selected phyton!";;
    0) exit
esac

bash bash-case.sh



--------------Bash for loop------------------------------
Bash `loop` statements

For loops allow repeated execution of a command sequence based on an iteration variable. Bash supports two kinds of for loop, a “list of values” and a “traditional” c-like method.

for varname in list
do
    commands 
done

Note that

1.  Bash for, in, do and done are keywords

2.  list contains a list of items, which can be in the statement or fetched from a variable that contains several words separated by spaces.

3.If list is missing from the for statement, then bash uses positional parameters that were passed into the shell.

Example:

vi bash-for-loop.sh

#!/bin/bash
i=1
for day in Mon Tue Wed Thu Fri
do
echo "$(( i++ )) : $day"
done


bash bash-for-loop.sh


#!/bin/bash
i=1
for day in Mon Tue Wed Thu Fri
do
echo -e "$(( i++ )) : $day \c"       this line helps to show output in single line
done


----------------c-style-loop-------------------------------
#!/bin/bash

for (( i=1; i <= 3; i++ ))
do
    echo "Your random number $i: $RANDOM"
done

------------- while loop-------------------------------
Bash while loop:

while expression
do
    commands
done


Note that

1. while, do, done are keywords
2. Expression is any expression which returns a scalar value
3. Commands between do and done are executed while the provided conditional expression is true

vi bash-whileloop.sh

#!/bin/bash

# This script prints 4 sequential numbers 0 1 2 3.

x="0"

while [ $x -lt 4 ]
do
    x=$[$x+1]
    echo $x
done
bash bash-whileloop.sh

------------------------Complex example of bash-------------------------
#!/bin/bash
 
select=0

echo "1. Apple"
echo "2. Oragne"
echo "3. Lime"

echo -n "Please select [1,2 or 3] : "

# Loop while the variable 'select' is equal 0
# bash while loop

while [ $select -eq 0 ]; do
 
# read user input
read select

# bash nested if/else
if [ $select -eq 1 ] ; then
 
        echo "You have selected: Apple"

else                   

        if [ $select -eq 2 ] ; then
                 echo "You have selected: Orange"
        else
         
                if [ $select -eq 3 ] ; then
                        echo "You have selected: Lime"
                else
                        echo "Please select between 1-3 !"
                        echo "1. Apple"
                        echo "2. Ornage"
                        echo "3. Lime"
                        echo -n "Please select [1,2 or 3] : "
                        choice=0
                fi   
        fi
fi
done

------------------------------------------
This below commands runs in Ubuntu

head csvfile.csv ----> give top 10 output (first 10 line)
head -n 25 csvfile.csv ----> top 25 outputs

  apt install python3-csvkit
  head  unirank.csv | csvlook
  head -n 25 unirank.csv | csvlook
  grep -i "college" unirank.csv | csvlook                 --------- search with case-insensitive condition
  wc -l unirank.csv                                       --------- word count
  grep -i "college" unirank.csv | wc -l                   --------- search case-insensitive for college
  grep "CA" unirank.csv | csvlook                         --------- only looks for CA
  
  Finding the number of institutes in all states
  cat unirank.csv | cut -f1,3 -d, | csvlook
  cat unirank.csv | cut -f1,3 -d, | sort -k 2 -t"," |csvlook
  cat unirank.csv | cut -f3 -d, | sort | uniq -c | csvlook
  
  correlation between university tuition and ranks (cat, cut, tail and redirect)
  cat unirank.csv | cut -f4,6 -d, > udata.csv
  sudo pip install bashplotlib
  cat udata.csv| tail -n +2 | scatter
  
  apt install bc
  bc -l <<< "7/232*100"


----------------------------------------------------------------------

 head unirank.csv
  head -n 25 unirank.csv
  apt install python3-csvkit
  head  unirank.csv | csvlook
  head -n 25 unirank.csv | csvlook
  grep -i "college" unirank.csv | csvlook
  wc -l unirank.csv
  grep -i "college" unirank.csv | wc -l
  grep "CA" unirank.csv | csvlook


cat unirank.csv | cut -f4,6 -d, > udata.csv
 sudo pip install bashplotlib
 cat udata.csv| tail -n +2 | scatter

---------------------------------------------------------------

------------------runevery-where.sh-----------------------
 #!/bin/bash

# A list of servers, one per line.
SERVER_LIST='/vagrant/servers'

# Options for the ssh command.
SSH_OPTIONS='-o ConnectTimeout=2'

usage() {
  # Display the usage and exit.
  echo "Usage: ${0} [-nsv] [-f FILE] COMMAND" >&2
  echo 'Executes COMMAND as a single command on every server.' >&2
  echo "  -f FILE  Use FILE for the list of servers. Default: ${SERVER_LIST}." >&2
  echo '  -n       Dry run mode. Display the COMMAND that would have been executed and exit.' >&2
  echo '  -s       Execute the COMMAND using sudo on the remote server.' >&2
  echo '  -v       Verbose mode. Displays the server name before executing COMMAND.' >&2
  exit 1
}

# Make sure the script is not being executed with superuser privileges.
if [[ "${UID}" -eq 0 ]]
then
  echo 'Do not execute this script as root. Use the -s option instead.' >&2
  usage
fi

# Parse the options.
while getopts f:nsv OPTION
do
  case ${OPTION} in
    f) SERVER_LIST="${OPTARG}" ;;
    n) DRY_RUN='true' ;;
    s) SUDO='sudo' ;;
    v) VERBOSE='true' ;;
    ?) usage ;;
  esac
done

# Remove the options while leaving the remaining arguments.
shift "$(( OPTIND - 1 ))"

# If the user doesn't supply at least one argument, give them help.
if [[ "${#}" -lt 1 ]]
then
  usage
fi

# Anything that remains on the command line is to be treated as a single command.
COMMAND="${@}"

# Make sure the SERVER_LIST file exists.
if [[ ! -e "${SERVER_LIST}" ]]
then
  echo "Cannot open server list file ${SERVER_LIST}." >&2
  exit 1
fi

# Expect the best, prepare for the worst.
EXIT_STATUS='0'

# Loop through the SERVER_LIST
for SERVER in $(cat ${SERVER_LIST})
do
  if [[ "${VERBOSE}" = 'true' ]]
  then
    echo "${SERVER}"
  fi

  SSH_COMMAND="ssh ${SSH_OPTIONS} ${SERVER} ${SUDO} ${COMMAND}"
 
  # If it's a dry run, don't execute anything, just echo it.
  if [[ "${DRY_RUN}" = 'true' ]]
  then
    echo "DRY RUN: ${SSH_COMMAND}"
  else
    ${SSH_COMMAND}
    SSH_EXIT_STATUS="${?}"

    # Capture any non-zero exit status from the SSH_COMMAND and report to the user.
    if [[ "${SSH_EXIT_STATUS}" -ne 0 ]]
    then
      EXIT_STATUS=${SSH_EXIT_STATUS}
      echo "Execution on ${SERVER} failed." >&2
    fi 
  fi
done

exit ${EXIT_STATUS}

 --------------------------
 echo 10.9.8.11 server01 | sudo tee -a /etc/hosts
 
 ------------Ping Script---------------------
 #!/bin/bash

#This Script will ping list of servers and list the status

SERVER_FILE='/opt/servers"

if [[ ! -e "${SERVER_FILE}" ]]
then
  echo "Can not Open ${SERVER_FILE}." >&2
  exit 1
fi

for SERVER in $(cat ${SERVER_FILE})
do
  echo "Pinging ${SERVER}"
  ping -c 1 ${SERVER} &> /dev/null
  if [[ "${?}" -ne 0 ]]
  then 
    echo "${SERVER} is down."
  else
    echo "${SERVER} up"
  fi
done  

 --------------------Script Testing-------------------------------
 
   ./run-everywhere.sh -n hostname
  ./run-everywhere.sh -v uptime
  ./run-everywhere.sh -ns id
  ./run-everywhere.sh -sv id
  ./run-everywhere.sh -f test hostname
  ./run-everywhere.sh -f /path/to/nowhere hostname
  ./run-everywhere.sh -s useradd test1
  ./run-everywhere.sh id test1
  echo "'Test two'"
  echo '"Test two"'
  ./run-everywhere.sh -ns 'useradd -c "Test two" test2'
  ./run-everywhere.sh -s 'useradd -c "Test two" test2'
  ./run-everywhere.sh id test2
  ./run-everywhere.sh -v id test2
  ./run-everywhere.sh -v tail -2 /etc/passwd
  ./run-everywhere.sh i-like-pizza
  echo $?

---------------- Apache Install-----------------------------------

#!/bin/bash

# This script installs the apache web server on the given host.
# This script assumes the user running it has sudo privs on the remote host.

usage() {
  # Display the usage and exit.
  echo "Usage: ${0} HOST [HOSTN...]" >&2
  exit 1
}

# Make sure the script is not being executed with superuser privileges.
#if [[ "${UID}" -eq 0 ]]
#then
#  echo 'Do not execute this script as root.' >&2
#  usage
#fi

# If the user doesn't supply at least one argument, give them help.
if [[ "${#}" -lt 1 ]]
then
  usage
fi

# Expect the best, prepare for the worst.
EXIT_STATUS='0'

# Loop through the provided servers.
for SERVER in "${@}"
do
  echo "Starting installation process on: ${SERVER}"

  # Ping the server to make sure it's up.
  ping -c 1 ${SERVER} &> /dev/null

  if [[ "${?}" -ne 0 ]]
  then
    echo "${SERVER} down."
    EXIT_STATUS='1'
    continue
  fi

  # Install the httpd package
  ssh ${SERVER} sudo yum install -y httpd

  # Create an index.html file.
  ssh ${SERVER} 'echo "${HOSTNAME}" | sudo tee /var/www/html/index.html >/dev/null'

  # Start httpd
  ssh ${SERVER} sudo systemctl start httpd

  # Enable httpd
  ssh ${SERVER} sudo systemctl enable httpd

  # Test that the web server is accessible.
  curl http://${SERVER}

  if [[ "${?}" -ne 0 ]]
  then
    echo "Could not access the web server on ${SERVER}." >&2
    EXIT_STATUS='1'
    continue
  fi

  echo "Finished installation process on: ${SERVER}"
done

exit ${EXIT_STATUS} 
 

